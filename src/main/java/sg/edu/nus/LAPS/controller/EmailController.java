package sg.edu.nus.LAPS.controller;

import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import sg.edu.nus.LAPS.model.ApprovalStatus;
import sg.edu.nus.LAPS.model.Claim;
import sg.edu.nus.LAPS.model.LeaveApplication;
import sg.edu.nus.LAPS.services.ClaimService;
import sg.edu.nus.LAPS.services.EmployeeService;
import sg.edu.nus.LAPS.services.LeaveApplicationService;

@RestController
public class EmailController {
    @Autowired
    ClaimService claimService;

    @Autowired
    LeaveApplicationService leaveApplicationService;

    @Autowired
    EmployeeService employeeService;

    @RequestMapping(value = "/send/email/{type}/{id}/{state}")
    public void sendTheEmail(@PathVariable("type") Integer type
            , @PathVariable("id") Integer id
            , @PathVariable("state") ApprovalStatus approvalStatus) throws AddressException, MessagingException, IOException
    {
        // claim = 1
        // leave = 2
        sendmail(type, id,approvalStatus);
        //return new RedirectView("/login");

    }

    public  void sendmail(Integer type, Integer id,ApprovalStatus approvalStatus) throws AddressException, MessagingException, IOException {
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                // move these to application.properties
                return new PasswordAuthentication("leave.app.processing@gmail.com", "141714171417");
            }
        });
        Message msg = new MimeMessage(session);
        msg.setFrom(new InternetAddress("leave.app.processing@gmail.com", false));

        System.out.println(type);
        System.out.println(id);

        // find manager id




        // get the manager email id
        if(type==1)
        {
            //get claim by Id
            Claim claim = claimService.findClaimById(id);
            String employeeName = claim.getEmployee().getName();
          //  String leaveType = claim.getLeaveType().getLeaveName();

            Date overTimeDate = claim.getOvertimeDate();
            Double hours = claim.getHoursWorked();


            System.out.println("in claim");

            Integer managerId = claim.getEmployee().getManagerId();
            String managerEmailId = employeeService.findEmployeeById(managerId).getEmailId();

            System.out.println(managerEmailId);



            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(managerEmailId));
            msg.setSubject("Claim request from "+employeeName);
            //msg.setContent("Email from LAPS for a claim ", "text/html");

            msg.setContent("Autogenerated email. \n"+
                            employeeName+" "
                            +approvalStatus
                            + "  Claim "

                            +" for date "
                            +overTimeDate
                            +" with hours "
                            +hours,
                    "text/html");




            msg.setSentDate(new Date());
        }
        else if(type==2)
        {
            // 2 - leave application
            // get leave app by id
            LeaveApplication leaveApplication = leaveApplicationService.findSingleLeaveById(id);

            // compose message
            String employeeName = leaveApplication.getEmployee().getName();
            String leaveType = leaveApplication.getLeaveType().getLeaveName();

            Date fromDate = leaveApplication.getFromDate();
            Date toDate = leaveApplication.getToDate();


            Integer managerId = leaveApplication.getEmployee().getManagerId();
            String managerEmailId = employeeService.findEmployeeById(managerId).getEmailId();

            System.out.println(managerEmailId);


            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(managerEmailId));
            msg.setSubject("Leave request from "+employeeName);
            msg.setContent("Autogenerated email. \n"+
                    employeeName+" "
                    + "applied for "
                    + leaveType
                    +" from "
                    +fromDate
                    +" to "
                    +toDate,
                    "text/html");

            msg.setSentDate(new Date());
        }



        // prepare a message based on claim or leave application - type variable
        // if type == 'claim' then claim message
        // if type == 'leave' then leave message
        // need an external trigger to tell if it is a claim or leave request.

        /*MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setContent("Tutorials point email", "text/html");

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);
        MimeBodyPart attachPart = new MimeBodyPart();*/

        //attachPart.attachFile("/var/tmp/image19.png");
        //multipart.addBodyPart(attachPart);
        //msg.setContent(multipart);
        Transport.send(msg);
    }


    @RequestMapping(value = "/send/email/emp/{type}/{id}/{state}")
    public void sendTheEmailToEmp(@PathVariable("type") Integer type
            , @PathVariable("id") Integer id
            , @PathVariable("state") ApprovalStatus approvalStatus) throws AddressException, MessagingException, IOException
    {
        // claim = 1
        // leave = 2
        sendMainToEmp(type, id,approvalStatus);

    }

    public  void sendMainToEmp(Integer type, Integer id,ApprovalStatus approvalStatus) throws AddressException, MessagingException, IOException {
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                // move these to application.properties
                return new PasswordAuthentication("leave.app.processing@gmail.com", "141714171417");
            }
        });
        Message msg = new MimeMessage(session);
        msg.setFrom(new InternetAddress("leave.app.processing@gmail.com", false));

        System.out.println(type);
        System.out.println(id);

        // find manager id




        // get the manager email id
        if(type==1)
        {
            //get claim by Id
            Claim claim = claimService.findClaimById(id);
            String employeeName = claim.getEmployee().getName();
            //  String leaveType = claim.getLeaveType().getLeaveName();

            Date overTimeDate = claim.getOvertimeDate();
            Double hours = claim.getHoursWorked();


            System.out.println("in claim");

            Integer empId = claim.getEmployee().getEmployeeId();
            String empEmailId = employeeService.findEmployeeById(empId).getEmailId();

            System.out.println(empEmailId);



            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(empEmailId));
            msg.setSubject("Claim request update from manager ");
            //msg.setContent("Email from LAPS for a claim ", "text/html");

            msg.setContent("Autogenerated email. \n"+
                            "Manager "+" "
                            +approvalStatus
                            + " your Claim "

                            +" for date "
                            +overTimeDate
                            +" with hours "
                            +hours,
                    "text/html");


            msg.setSentDate(new Date());
        }
        else if(type==2)
        {
            // 2 - leave application
            // get leave app by id
            LeaveApplication leaveApplication = leaveApplicationService.findSingleLeaveById(id);

            // compose message
            String employeeName = leaveApplication.getEmployee().getName();
            String leaveType = leaveApplication.getLeaveType().getLeaveName();

            Date fromDate = leaveApplication.getFromDate();
            Date toDate = leaveApplication.getToDate();


            System.out.println("in claim");

            Integer empId = leaveApplication.getEmployee().getEmployeeId();
            String empEmailId = employeeService.findEmployeeById(empId).getEmailId();

            System.out.println(empEmailId);



            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(empEmailId));
            msg.setSubject("Leave request updated from manager");
            msg.setContent("Autogenerated email. \n"+
                            "Manager "+approvalStatus
                            + " your  "
                            + leaveType
                            +" from "
                            +fromDate
                            +" to "
                            +toDate,
                    "text/html");

            msg.setSentDate(new Date());
        }



        // prepare a message based on claim or leave application - type variable
        // if type == 'claim' then claim message
        // if type == 'leave' then leave message
        // need an external trigger to tell if it is a claim or leave request.

        /*MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setContent("Tutorials point email", "text/html");

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);
        MimeBodyPart attachPart = new MimeBodyPart();*/

        //attachPart.attachFile("/var/tmp/image19.png");
        //multipart.addBodyPart(attachPart);
        //msg.setContent(multipart);
        Transport.send(msg);
    }

}
